#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdbool.h>
#include <math.h>
#include <unistd.h> // for sleep function

typedef struct {
    int eventNumber;
    int timestamp;
    float x;
    float y;
    float z;
} SensorEvent;

int main() {
    SensorEvent previousEvent;
    float threshold = 0.1;
    int numEvents = 0;
    bool isFirstEvent = true;
    char line[100]; // Assuming a maximum line length of 100 characters

    while (true) {
        fgets(line, sizeof(line), stdin);

        sscanf(line, "%d @ %d", &previousEvent.eventNumber, &previousEvent.timestamp);
        sscanf(strstr(line, "x"), "x %f", &previousEvent.x);
        sscanf(strstr(line, "y"), "y %f", &previousEvent.y);
        sscanf(strstr(line, "z"), "z %f", &previousEvent.z);

        // Process the first event
        if (isFirstEvent) {
            isFirstEvent = false;
            continue;
        }

        // Check if the current event is different from the previous event
        SensorEvent currentEvent;
        sscanf(line, "%d @ %d", &currentEvent.eventNumber, &currentEvent.timestamp);
        sscanf(strstr(line, "x"), "x %f", &currentEvent.x);
        sscanf(strstr(line, "y"), "y %f", &currentEvent.y);
        sscanf(strstr(line, "z"), "z %f", &currentEvent.z);

        if (fabs(currentEvent.x - previousEvent.x) > threshold ||
            fabs(currentEvent.y - previousEvent.y) > threshold ||
            fabs(currentEvent.z - previousEvent.z) > threshold) {
            numEvents++;
        }

        previousEvent = currentEvent;

        printf("Number of events: %d\n", numEvents);

        sleep(2); // Sleep for 2 seconds (2000ms)
    }

    return 0;
}
